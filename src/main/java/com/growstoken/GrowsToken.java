package com.growstoken;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class GrowsToken extends Contract {
    public static final String BINARY = "6080604052600f80546001600160a81b0319169055620186a06010556305f5e100601255601680546001600160a01b03191673344b7de7c08136cfa96d81fe08563fbad32eca3b1790553480156200005657600080fd5b506040518060400160405280600a81526020016923b937bbb9aa37b5b2b760b11b8152506040518060400160405280600381526020016211d4d560ea1b8152508160009081620000a79190620001d8565b506001620000b68282620001d8565b5050600b805460ff1916905550620000ce33620000d9565b6000601155620002a4565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200015e57607f821691505b6020821081036200017f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d357600081815260208120601f850160051c81016020861015620001ae5750805b601f850160051c820191505b81811015620001cf57828155600101620001ba565b5050505b505050565b81516001600160401b03811115620001f457620001f462000133565b6200020c8162000205845462000149565b8462000185565b602080601f8311600181146200024457600084156200022b5750858301515b600019600386901b1c1916600185901b178555620001cf565b600085815260208120601f198616915b82811015620002755788860151825594840194600190910190840162000254565b5085821015620002945787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6134a280620002b46000396000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80636352211e11610151578063b653e2ac116100c3578063c6ee20d211610087578063c6ee20d21461051f578063c87b56dd1461053e578063e4d4c3c014610551578063e985e9c514610564578063f272d3e5146105a0578063f2fde38b146105a957600080fd5b8063b653e2ac146104df578063b88d4fde146104f2578063b9b294c714610505578063b9f0c4821461050d578063bc7a36d61461051657600080fd5b80637c7560e1116101155780637c7560e11461044f5780638456cb591461048b5780638da5cb5b1461049357806395d89b41146104a9578063a05f7057146104b1578063a22cb465146104cc57600080fd5b80636352211e1461040e578063639a66d61461042157806366a8b81e1461042c57806370a0823114610434578063715018a61461044757600080fd5b80631ec1e36a116101ea5780633544a864116101ae5780633544a864146103aa5780633f4ba83a146103c257806342842e0e146103ca57806342966c68146103dd5780634f6ccce7146103f05780635c975abb1461040357600080fd5b80631ec1e36a1461035057806323b872dd1461035857806324dc71241461036b5780632ef8beaf1461038e5780632f745c591461039757600080fd5b806310ea13df1161023157806310ea13df146102f357806318160ddd1461030a578063195a4f7e146103125780631d7c410d1461031a5780631ea0311d1461033d57600080fd5b806301ffc9a71461026e57806306fdde0314610296578063081812fc146102ab578063095ea7b3146102d6578063098f1aa5146102eb575b600080fd5b61028161027c366004612b1f565b6105bc565b60405190151581526020015b60405180910390f35b61029e6105cd565b60405161028d9190612b8c565b6102be6102b9366004612b9f565b61065f565b6040516001600160a01b03909116815260200161028d565b6102e96102e4366004612bd4565b610686565b005b6102e96107a0565b6102fc60145481565b60405190815260200161028d565b6008546102fc565b6102fc601281565b610281610328366004612b9f565b6000908152600e602052604090205460ff1690565b6102e961034b366004612c0c565b610912565b6102e961093a565b6102e9610366366004612c3c565b610b6a565b61029e604051806040016040528060048152602001634555524360e01b81525081565b6102fc60125481565b6102fc6103a5366004612bd4565b610b9c565b600f546102be9061010090046001600160a01b031681565b6102e9610c32565b6102e96103d8366004612c3c565b610c44565b6102e96103eb366004612b9f565b610c5f565b6102fc6103fe366004612b9f565b610c8d565b600b5460ff16610281565b6102be61041c366004612b9f565b610d20565b6102fc630a0041bd81565b6102e9610d80565b6102fc610442366004612c78565b610fda565b6102e9611060565b61047661045d366004612c78565b6013602052600090815260409020805460019091015482565b6040805192835260208301919091520161028d565b6102e9611072565b600b5461010090046001600160a01b03166102be565b61029e611082565b6102be73344b7de7c08136cfa96d81fe08563fbad32eca3b81565b6102e96104da366004612c93565b611091565b6016546102be906001600160a01b031681565b6102e9610500366004612cd5565b61109c565b6102e96110d4565b6102fc60105481565b6102fc60155481565b600f5461052c9060ff1681565b60405160ff909116815260200161028d565b61029e61054c366004612b9f565b6111b2565b6102e961055f366004612b9f565b6111bd565b610281610572366004612db1565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102fc60115481565b6102e96105b7366004612c78565b6117d1565b60006105c782611847565b92915050565b6060600080546105dc90612de4565b80601f016020809104026020016040519081016040528092919081815260200182805461060890612de4565b80156106555780601f1061062a57610100808354040283529160200191610655565b820191906000526020600020905b81548152906001019060200180831161063857829003601f168201915b5050505050905090565b600061066a8261186c565b506000908152600460205260409020546001600160a01b031690565b600061069182610d20565b9050806001600160a01b0316836001600160a01b0316036107035760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061071f575061071f8133610572565b6107915760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016106fa565b61079b83836118cb565b505050565b600f5460ff166002146107d95760405162461bcd60e51b81526020600482015260016024820152603960f81b60448201526064016106fa565b336000908152601360205260408120600181015490546107f891611939565b90506000811161080757600080fd5b60165460405163a9059cbb60e01b8152336004820152602481018390526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190612e1e565b604080518215158152602081018590529192507f7f373fd9b75a7ff68ca87bd11dd51324403abda132266cdedad67fb8616f82b2910160405180910390a1806108ed5760405162461bcd60e51b8152602060048201526002602482015261031360f41b60448201526064016106fa565b80151560010361090e57336000908152601360205260408120818155600101555b5050565b61091a61194c565b6000918252600e6020526040909120805460ff1916911515919091179055565b600f5460ff166001146109745760405162461bcd60e51b8152602060048201526002602482015261313160f01b60448201526064016106fa565b6000601454116109ab5760405162461bcd60e51b8152602060048201526002602482015261189960f11b60448201526064016106fa565b33732b8775da697b9db4fe496bc4438b3574f7c92e0f146109f35760405162461bcd60e51b8152602060048201526002602482015261313360f01b60448201526064016106fa565b6014546016546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190612e3b565b1015610a955760405162461bcd60e51b81526020600482015260026024820152610c4d60f21b60448201526064016106fa565b60165460145460405163a9059cbb60e01b815233600482015260248101919091526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190612e1e565b90507f91c6e51d82b305368285066544707346f1e39405a5e5bc8576043f488d20a3c581601454604051610b4f9291909115158252602082015260400190565b60405180910390a1801515600103610b675760006014555b50565b610b75335b826119ac565b610b915760405162461bcd60e51b81526004016106fa90612e54565b61079b838383611a2b565b6000610ba783610fda565b8210610c095760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106fa565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610c3a61194c565b610c42611be1565b565b61079b8383836040518060200160405280600081525061109c565b610c6833610b6f565b610c845760405162461bcd60e51b81526004016106fa90612e54565b610b6781611c2e565b6000610c9860085490565b8210610cfb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106fa565b60088281548110610d0e57610d0e612ea1565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105c75760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016106fa565b600f5460ff16600114610dba5760405162461bcd60e51b8152602060048201526002602482015261313560f01b60448201526064016106fa565b6000732b8775da697b9db4fe496bc4438b3574f7c92e0e193301610ddd57506014545b738ceabc679381f43b5f318a7b741ebfadd87a4c47193301610dfe57506015545b60008111610e365760405162461bcd60e51b815260206004820152600560248201526406e6f7420360dc1b60448201526064016106fa565b6016546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea29190612e3b565b1015610ed55760405162461bcd60e51b8152602060048201526002602482015261189b60f11b60448201526064016106fa565b60165460405163a9059cbb60e01b8152336004820152602481018390526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190612e1e565b604080518215158152602081018590529192507f91c6e51d82b305368285066544707346f1e39405a5e5bc8576043f488d20a3c5910160405180910390a180151560010361090e57732b8775da697b9db4fe496bc4438b3574f7c92e0e193301610fb55760006014555b738ceabc679381f43b5f318a7b741ebfadd87a4c4719330161090e5760006015555050565b60006001600160a01b0382166110445760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016106fa565b506001600160a01b031660009081526003602052604090205490565b61106861194c565b610c426000611c37565b61107a61194c565b610c42611c91565b6060600180546105dc90612de4565b61090e338383611cce565b6110a633836119ac565b6110c25760405162461bcd60e51b81526004016106fa90612e54565b6110ce84848484611d9c565b50505050565b600f5460ff161561110b5760405162461bcd60e51b81526020600482015260016024820152603160f81b60448201526064016106fa565b630a0041bd42116111425760405162461bcd60e51b81526020600482015260016024820152601960f91b60448201526064016106fa565b6012546011541061115f57600f805460ff1916600117905561116d565b600f805460ff191660021790555b601154600f546040805192835260ff90911660208301527f0cc9571640ebbc6cb99c002eda5a29fe0c500ef6b9170f64b762b20e3e4fb0ce91015b60405180910390a1565b60606105c782611dcf565b600f5460405163711350db60e11b81523360048201526101009091046001600160a01b03169063e226a1b690602401602060405180830381865afa158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d9190612e1e565b151560011461123b57600080fd5b600f5460ff16600119016112755760405162461bcd60e51b81526020600482015260016024820152603360f81b60448201526064016106fa565b6000811161128257600080fd5b60006112a561129360026012612ecd565b61129e90600a612fc4565b8390611eca565b905060698110156112dc5760405162461bcd60e51b81526020600482015260016024820152600d60fa1b60448201526064016106fa565b601054601154106113135760405162461bcd60e51b81526020600482015260016024820152603560f81b60448201526064016106fa565b600061132c601154601054611ed690919063ffffffff16565b601654604051636eb1769f60e11b81523360048201523060248201529192506000916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015611380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a49190612e3b565b9050838110156113da5760405162461bcd60e51b81526020600482015260016024820152601b60f91b60448201526064016106fa565b60006113f260156113ec876014611ee2565b90611eca565b905061140a6114036012600a612fc4565b8290611eca565b905061142261141b6012600a612fc4565b8290611ee2565b90508281111561142f5750815b600061143c866015611eca565b9050600061144a8784611ed6565b905081811115611458578091505b60006114648385611939565b6016546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156114b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d59190612e3b565b10156115075760405162461bcd60e51b81526020600482015260016024820152603760f81b60448201526064016106fa565b6016546040516323b872dd60e01b8152336004820152306024820152604481018390526000916001600160a01b0316906323b872dd906064016020604051808303816000875af115801561155f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115839190612e1e565b9050806115b65760405162461bcd60e51b81526020600482015260016024820152600760fb1b60448201526064016106fa565b8015156001036117c65733600090815260136020526040812080548792906115df908490612fd0565b90915550503360009081526013602052604081206001018054869290611606908490612fd0565b92505081905550846014600082825461161f9190612fd0565b9250508190555083601560008282546116389190612fd0565b9091555050601054601154604051630f6f423760e01b8152600481018890526024810192909252604482015260009081907330aff5dd86c964478673ad421bdd221262b55b2a90630f6f4237906064016040805180830381865afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190612fe3565b915091506000816116da5760006116dd565b60015b905060006116ea89611eee565b6040516020016116fa9190613008565b60405160208183030381529060405290508060405160200161171c9190613042565b60405160208183030381529060405290508061173783611eee565b60405160200161174892919061307a565b60405160208183030381529060405290508060405160200161176a91906130a9565b60405160208183030381529060405290508061178585611eee565b60405160200161179692919061307a565b60405160208183030381529060405290506117b13382611fef565b6011546117be908a611939565b601155505050505b505050505050505050565b6117d961194c565b6001600160a01b03811661183e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106fa565b610b6781611c37565b60006001600160e01b0319821663780e9d6360e01b14806105c757506105c782612037565b6000818152600260205260409020546001600160a01b0316610b675760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016106fa565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061190082610d20565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006119458284612fd0565b9392505050565b600b546001600160a01b03610100909104163314610c425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fa565b6000806119b883610d20565b9050806001600160a01b0316846001600160a01b031614806119ff57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611a235750836001600160a01b0316611a188461065f565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a3e82610d20565b6001600160a01b031614611aa25760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106fa565b6001600160a01b038216611b045760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106fa565b611b0f838383612087565b600081815260046020908152604080832080546001600160a01b03191690556001600160a01b038616835260039091528120805460019290611b52908490612ecd565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b80908490612fd0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611be96121a2565b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016111a8565b610b67816121eb565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611c9961222b565b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c163390565b816001600160a01b0316836001600160a01b031603611d2f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106fa565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611da7848484611a2b565b611db384848484612271565b6110ce5760405162461bcd60e51b81526004016106fa906130dd565b6060611dda8261186c565b6000828152600a602052604081208054611df390612de4565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1f90612de4565b8015611e6c5780601f10611e4157610100808354040283529160200191611e6c565b820191906000526020600020905b815481529060010190602001808311611e4f57829003601f168201915b505050505090506000611e7d612372565b90508051600003611e8f575092915050565b815115611ec1578082604051602001611ea992919061307a565b60405160208183030381529060405292505050919050565b611a2384612392565b60006119458284613145565b60006119458284612ecd565b60006119458284613159565b606081600003611f155750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611f3f5780611f2981613178565b9150611f389050600a83613145565b9150611f19565b60008167ffffffffffffffff811115611f5a57611f5a612cbf565b6040519080825280601f01601f191660200182016040528015611f84576020820181803683370190505b5090505b8415611a2357611f99600183612ecd565b9150611fa6600a86613191565b611fb1906030612fd0565b60f81b818381518110611fc657611fc6612ea1565b60200101906001600160f81b031916908160001a905350611fe8600a86613145565b9450611f88565b6000611ffa600c5490565b905061200a600c80546001019055565b6000818152600e60205260409020805460ff1916600117905561202d83826123f8565b61079b8183612412565b60006001600160e01b031982166380ac58cd60e01b148061206857506001600160e01b03198216635b5e139f60e01b145b806105c757506301ffc9a760e01b6001600160e01b03198316146105c7565b61208f61222b565b61209a8383836124a5565b6000818152600e602052604090205460ff166120e85760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b881a5b9d985a5b19609a1b60448201526064016106fa565b60006120f34261255d565b905080600f14158015612107575080601014155b8015612114575080601114155b61214d5760405162461bcd60e51b815260206004820152600a60248201526919185d19481b1a5b5a5d60b21b60448201526064016106fa565b6001600160a01b038416156110ce57600f5460ff166001146110ce5760405162461bcd60e51b815260206004820152600e60248201526d18dbdb9d1c9858dd081d985a5b1960921b60448201526064016106fa565b600b5460ff16610c425760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106fa565b6121f481612580565b6000818152600a60205260409020805461220d90612de4565b159050610b67576000818152600a60205260408120610b6791612abb565b600b5460ff1615610c425760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106fa565b60006001600160a01b0384163b1561236757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122b59033908990889088906004016131a5565b6020604051808303816000875af19250505080156122f0575060408051601f3d908101601f191682019092526122ed918101906131d8565b60015b61234d573d80801561231e576040519150601f19603f3d011682016040523d82523d6000602084013e612323565b606091505b5080516000036123455760405162461bcd60e51b81526004016106fa906130dd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a23565b506001949350505050565b606060405180606001604052806027815260200161341c60279139905090565b606061239d8261186c565b60006123a7612372565b905060008151116123c75760405180602001604052806000815250611945565b806123d184611eee565b6040516020016123e292919061307a565b6040516020818303038152906040529392505050565b61090e828260405180602001604052806000815250612636565b6000828152600260205260409020546001600160a01b031661248d5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016106fa565b6000828152600a6020526040902061079b8282613243565b6001600160a01b038316612500576124fb81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612523565b816001600160a01b0316836001600160a01b031614612523576125238382612669565b6001600160a01b03821661253a5761079b81612706565b826001600160a01b0316826001600160a01b03161461079b5761079b82826127b5565b600080806125766125716201518086613145565b6127f9565b9695505050505050565b600061258b82610d20565b905061259981600084612087565b600082815260046020908152604080832080546001600160a01b03191690556001600160a01b0384168352600390915281208054600192906125dc908490612ecd565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612640838361296d565b61264d6000848484612271565b61079b5760405162461bcd60e51b81526004016106fa906130dd565b6000600161267684610fda565b6126809190612ecd565b6000838152600760205260409020549091508082146126d3576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061271890600190612ecd565b6000838152600960205260408120546008805493945090928490811061274057612740612ea1565b90600052602060002001549050806008838154811061276157612761612ea1565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061279957612799613303565b6001900381819060005260206000200160009055905550505050565b60006127c083610fda565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60008080838162253d8c6128108362010bd9613319565b61281a9190613319565b9050600062023ab161282d836004613341565b61283791906133c6565b905060046128488262023ab1613341565b612853906003613319565b61285d91906133c6565b61286790836133f4565b9150600062164b0961287a846001613319565b61288690610fa0613341565b61289091906133c6565b905060046128a0826105b5613341565b6128aa91906133c6565b6128b490846133f4565b6128bf90601f613319565b9250600061098f6128d1856050613341565b6128db91906133c6565b9050600060506128ed8361098f613341565b6128f791906133c6565b61290190866133f4565b905061290e600b836133c6565b945061291b85600c613341565b612926836002613319565b61293091906133f4565b9150848361293f6031876133f4565b61294a906064613341565b6129549190613319565b61295e9190613319565b9a919950975095505050505050565b6001600160a01b0382166129c35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106fa565b6000818152600260205260409020546001600160a01b031615612a285760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106fa565b612a3460008383612087565b6001600160a01b0382166000908152600360205260408120805460019290612a5d908490612fd0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b508054612ac790612de4565b6000825580601f10612ad7575050565b601f016020900490600052602060002090810190610b6791905b80821115612b055760008155600101612af1565b5090565b6001600160e01b031981168114610b6757600080fd5b600060208284031215612b3157600080fd5b813561194581612b09565b60005b83811015612b57578181015183820152602001612b3f565b50506000910152565b60008151808452612b78816020860160208601612b3c565b601f01601f19169290920160200192915050565b6020815260006119456020830184612b60565b600060208284031215612bb157600080fd5b5035919050565b80356001600160a01b0381168114612bcf57600080fd5b919050565b60008060408385031215612be757600080fd5b612bf083612bb8565b946020939093013593505050565b8015158114610b6757600080fd5b60008060408385031215612c1f57600080fd5b823591506020830135612c3181612bfe565b809150509250929050565b600080600060608486031215612c5157600080fd5b612c5a84612bb8565b9250612c6860208501612bb8565b9150604084013590509250925092565b600060208284031215612c8a57600080fd5b61194582612bb8565b60008060408385031215612ca657600080fd5b612caf83612bb8565b91506020830135612c3181612bfe565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612ceb57600080fd5b612cf485612bb8565b9350612d0260208601612bb8565b925060408501359150606085013567ffffffffffffffff80821115612d2657600080fd5b818701915087601f830112612d3a57600080fd5b813581811115612d4c57612d4c612cbf565b604051601f8201601f19908116603f01168101908382118183101715612d7457612d74612cbf565b816040528281528a6020848701011115612d8d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612dc457600080fd5b612dcd83612bb8565b9150612ddb60208401612bb8565b90509250929050565b600181811c90821680612df857607f821691505b602082108103612e1857634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612e3057600080fd5b815161194581612bfe565b600060208284031215612e4d57600080fd5b5051919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156105c7576105c7612eb7565b600181815b80851115612f1b578160001904821115612f0157612f01612eb7565b80851615612f0e57918102915b93841c9390800290612ee5565b509250929050565b600082612f32575060016105c7565b81612f3f575060006105c7565b8160018114612f555760028114612f5f57612f7b565b60019150506105c7565b60ff841115612f7057612f70612eb7565b50506001821b6105c7565b5060208310610133831016604e8410600b8410161715612f9e575081810a6105c7565b612fa88383612ee0565b8060001904821115612fbc57612fbc612eb7565b029392505050565b60006119458383612f23565b808201808211156105c7576105c7612eb7565b60008060408385031215612ff657600080fd5b825191506020830151612c3181612bfe565b7126696e766573746d656e74416d6f756e743d60701b815260008251613035816012850160208701612b3c565b9190910160120192915050565b60008251613054818460208701612b3c565b73266973506f736974697665496e7465726573743d60601b920191825250601401919050565b6000835161308c818460208801612b3c565b8351908301906130a0818360208801612b3c565b01949350505050565b600082516130bb818460208701612b3c565b6f2661646a757374496e7465726573743d60801b920191825250601001919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000826131545761315461312f565b500490565b600081600019048311821515161561317357613173612eb7565b500290565b60006001820161318a5761318a612eb7565b5060010190565b6000826131a0576131a061312f565b500690565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061257690830184612b60565b6000602082840312156131ea57600080fd5b815161194581612b09565b601f82111561079b57600081815260208120601f850160051c8101602086101561321c5750805b601f850160051c820191505b8181101561323b57828155600101613228565b505050505050565b815167ffffffffffffffff81111561325d5761325d612cbf565b6132718161326b8454612de4565b846131f5565b602080601f8311600181146132a6576000841561328e5750858301515b600019600386901b1c1916600185901b17855561323b565b600085815260208120601f198616915b828110156132d5578886015182559484019460019091019084016132b6565b50858210156132f35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b808201828112600083128015821682158216171561333957613339612eb7565b505092915050565b60006001600160ff1b038184138284138082168684048611161561336757613367612eb7565b600160ff1b600087128281168783058912161561338657613386612eb7565b600087129250878205871284841616156133a2576133a2612eb7565b878505871281841616156133b8576133b8612eb7565b505050929093029392505050565b6000826133d5576133d561312f565b600160ff1b8214600019841416156133ef576133ef612eb7565b500590565b818103600083128015838313168383128216171561341457613414612eb7565b509291505056fe68747470733a2f2f7777772e67726f7773746f6b656e2e636f6d2f646976746f6b656e2f677374a264697066735822122057a77074a7d41bddda55425547326922328d3aefa555ebe146da7a1e6517f5bf64736f6c63782c302e382e31372d646576656c6f702e323032322e382e31302b636f6d6d69742e36623630353234632e6d6f64005d";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_CONTRACTINITIALIZATIONCHECK = "contractInitializationCheck";

    public static final String FUNC_CONTRACTSTATUS = "contractStatus";

    public static final String FUNC_CURRENTFINANCINGSTABLECOININDEX = "currentFinancingStableCoinIndex";

    public static final String FUNC_DEADLINEFINANCIINGDATETIMESTAMP = "deadlineFinanciingDateTimeStamp";

    public static final String FUNC_FINANCINGSTABLECOINADDRESS = "financingStableCoinAddress";

    public static final String FUNC_FINANCINGSTABLECOINDECIMALS = "financingStableCoinDecimals";

    public static final String FUNC_FINANCINGSTABLECOINSYMBOL = "financingStableCoinSymbol";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETTOKENVAILD = "getTokenVaild";

    public static final String FUNC_INVESTMENT = "investment";

    public static final String FUNC_INVESTORSTABLECOINBALANCES = "investorStableCoinBalances";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINFINANCINGAMOUNT = "minFinancingAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETTOKENINVAILD = "setTokenInvaild";

    public static final String FUNC_STABLETOKENERC = "stableTokenERC";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALFINANCINGSTABLECOIN = "totalFinancingStableCoin";

    public static final String FUNC_TOTALINTEREST = "totalInterest";

    public static final String FUNC_TOTALINVESTMENT = "totalInvestment";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_WHITELIST = "whiteList";

    public static final String FUNC_WITHDRAWALBYFINANCINGCOMPANYINONETIME = "withdrawalByFinancingCompanyInOneTime";

    public static final String FUNC_WITHDRAWALINVESTMENT = "withdrawalInvestment";

    public static final String FUNC_WITHDRAWALWHENCONTRACTVAILDINONETIME = "withdrawalWhenContractVaildInOneTime";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event CONTRACTINITIALIZATIONLOG_EVENT = new Event("contractInitializationLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVESTMENTRESPONSE_EVENT = new Event("investmentResponse", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event WITHDRAWALFINANCINGCOMPANYRESPONSE_EVENT = new Event("withdrawalFinancingCompanyResponse", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALINVESTMENTRESPONSE_EVENT = new Event("withdrawalInvestmentResponse", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected GrowsToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GrowsToken(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected GrowsToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected GrowsToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public List<ContractInitializationLogEventResponse> getContractInitializationLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONTRACTINITIALIZATIONLOG_EVENT, transactionReceipt);
        ArrayList<ContractInitializationLogEventResponse> responses = new ArrayList<ContractInitializationLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ContractInitializationLogEventResponse typedResponse = new ContractInitializationLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.currentFinancingStableCoinIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractStatus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ContractInitializationLogEventResponse> contractInitializationLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ContractInitializationLogEventResponse>() {
            @Override
            public ContractInitializationLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONTRACTINITIALIZATIONLOG_EVENT, log);
                ContractInitializationLogEventResponse typedResponse = new ContractInitializationLogEventResponse();
                typedResponse.log = log;
                typedResponse.currentFinancingStableCoinIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.contractStatus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ContractInitializationLogEventResponse> contractInitializationLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONTRACTINITIALIZATIONLOG_EVENT));
        return contractInitializationLogEventFlowable(filter);
    }

    public List<InvestmentResponseEventResponse> getInvestmentResponseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVESTMENTRESPONSE_EVENT, transactionReceipt);
        ArrayList<InvestmentResponseEventResponse> responses = new ArrayList<InvestmentResponseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvestmentResponseEventResponse typedResponse = new InvestmentResponseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvestmentResponseEventResponse> investmentResponseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InvestmentResponseEventResponse>() {
            @Override
            public InvestmentResponseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVESTMENTRESPONSE_EVENT, log);
                InvestmentResponseEventResponse typedResponse = new InvestmentResponseEventResponse();
                typedResponse.log = log;
                typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InvestmentResponseEventResponse> investmentResponseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVESTMENTRESPONSE_EVENT));
        return investmentResponseEventFlowable(filter);
    }

    public List<WithdrawalFinancingCompanyResponseEventResponse> getWithdrawalFinancingCompanyResponseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWALFINANCINGCOMPANYRESPONSE_EVENT, transactionReceipt);
        ArrayList<WithdrawalFinancingCompanyResponseEventResponse> responses = new ArrayList<WithdrawalFinancingCompanyResponseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalFinancingCompanyResponseEventResponse typedResponse = new WithdrawalFinancingCompanyResponseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.totalamount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalFinancingCompanyResponseEventResponse> withdrawalFinancingCompanyResponseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawalFinancingCompanyResponseEventResponse>() {
            @Override
            public WithdrawalFinancingCompanyResponseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWALFINANCINGCOMPANYRESPONSE_EVENT, log);
                WithdrawalFinancingCompanyResponseEventResponse typedResponse = new WithdrawalFinancingCompanyResponseEventResponse();
                typedResponse.log = log;
                typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.totalamount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawalFinancingCompanyResponseEventResponse> withdrawalFinancingCompanyResponseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALFINANCINGCOMPANYRESPONSE_EVENT));
        return withdrawalFinancingCompanyResponseEventFlowable(filter);
    }

    public List<WithdrawalInvestmentResponseEventResponse> getWithdrawalInvestmentResponseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWALINVESTMENTRESPONSE_EVENT, transactionReceipt);
        ArrayList<WithdrawalInvestmentResponseEventResponse> responses = new ArrayList<WithdrawalInvestmentResponseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalInvestmentResponseEventResponse typedResponse = new WithdrawalInvestmentResponseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investmetnQua = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalInvestmentResponseEventResponse> withdrawalInvestmentResponseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawalInvestmentResponseEventResponse>() {
            @Override
            public WithdrawalInvestmentResponseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWALINVESTMENTRESPONSE_EVENT, log);
                WithdrawalInvestmentResponseEventResponse typedResponse = new WithdrawalInvestmentResponseEventResponse();
                typedResponse.log = log;
                typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.investmetnQua = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawalInvestmentResponseEventResponse> withdrawalInvestmentResponseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALINVESTMENTRESPONSE_EVENT));
        return withdrawalInvestmentResponseEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> contractInitializationCheck() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CONTRACTINITIALIZATIONCHECK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> contractStatus() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> currentFinancingStableCoinIndex() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURRENTFINANCINGSTABLECOININDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> deadlineFinanciingDateTimeStamp() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEADLINEFINANCIINGDATETIMESTAMP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> financingStableCoinAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FINANCINGSTABLECOINADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> financingStableCoinDecimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FINANCINGSTABLECOINDECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> financingStableCoinSymbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FINANCINGSTABLECOINSYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> getTokenVaild(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENVAILD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> investment(BigInteger stableCoinAccount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INVESTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(stableCoinAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> investorStableCoinBalances(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INVESTORSTABLECOINBALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> minFinancingAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINFINANCINGAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTokenInvaild(BigInteger tokenId, Boolean isVaild) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTOKENINVAILD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Bool(isVaild)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> stableTokenERC() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STABLETOKENERC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalFinancingStableCoin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALFINANCINGSTABLECOIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalInterest() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALINTEREST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalInvestment() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALINVESTMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> whiteList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WHITELIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawalByFinancingCompanyInOneTime() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALBYFINANCINGCOMPANYINONETIME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawalInvestment() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALINVESTMENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawalWhenContractVaildInOneTime() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALWHENCONTRACTVAILDINONETIME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static GrowsToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GrowsToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static GrowsToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GrowsToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static GrowsToken load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new GrowsToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static GrowsToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new GrowsToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<GrowsToken> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(GrowsToken.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<GrowsToken> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(GrowsToken.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<GrowsToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GrowsToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<GrowsToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GrowsToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class ContractInitializationLogEventResponse extends BaseEventResponse {
        public BigInteger currentFinancingStableCoinIndex;

        public BigInteger contractStatus;
    }

    public static class InvestmentResponseEventResponse extends BaseEventResponse {
        public Boolean success;

        public byte[] data;
    }

    public static class WithdrawalFinancingCompanyResponseEventResponse extends BaseEventResponse {
        public Boolean success;

        public BigInteger totalamount;
    }

    public static class WithdrawalInvestmentResponseEventResponse extends BaseEventResponse {
        public Boolean success;

        public BigInteger investmetnQua;
    }
}
